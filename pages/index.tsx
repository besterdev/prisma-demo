import type { NextPage } from "next";
import Head from "next/head";
import _ from "lodash";
import { Contact, Prisma, PrismaClient } from "@prisma/client";
import { useRef, useState } from "react";
import Image from "next/image";
import { ContactForm } from "../components/ContactForm";
import { useRouter } from "next/router";
import { ToastContainer, toast } from "react-toastify";

interface FormData {
  id?: string;
  firstName: string;
  lastName: string;
  email: string;
  avatar: string;
}

const prisma = new PrismaClient();

export async function getServerSideProps() {
  const contacts: Contact[] = await prisma.contact.findMany();
  return {
    props: {
      initialContacts: contacts,
    },
  };
}

async function saveContact(contact: Prisma.ContactCreateInput) {
  return fetch("/api/contacts", {
    method: "POST",
    body: JSON.stringify(contact),
  });
}

async function deleteContact(contactId: string) {
  return fetch("/api/contacts", {
    method: "DELETE",
    body: JSON.stringify({ id: contactId }),
  });

  // if (!response.ok) {
  //   throw new Error(response.statusText);
  // }
  // return response.json();
}

const Home: NextPage = ({ initialContacts }: any) => {
  const router = useRouter();
  const [contacts, setContacts] = useState<Contact[]>(initialContacts);
  const toastId = useRef<any>(null);

  const notify = () =>
    (toastId.current = toast("Loading...", {
      isLoading: true,
      autoClose: false,
    }));

  const update = () =>
    toast.update(toastId.current, {
      type: toast.TYPE.SUCCESS,

      autoClose: 5000,
    });

  const onSubmit = async (data: FormData) => {
    try {
      await notify();
      const resp = await saveContact(data);
      if (resp.status === 200) {
        update();
        router.reload();
      }
    } catch (error) {
      console.log(error);
    }
  };

  const onDelete = async (contactId: string) => {
    try {
      await notify();
      const resp = await deleteContact(contactId);
      if (resp.status === 200) {
        update();
        router.reload();
      }
    } catch (error) {
      console.log(error);
    }
  };

  return (
    <div className="container w-screen h-screen mx-auto">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ToastContainer
        position="top-right"
        autoClose={5000}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
      />
      <main className="flex items-center justify-center w-full h-full space-x-20 rounded-md">
        <div className="p-10 border rounded-lg shadow-xl min-w-[400px]">
          <ContactForm onSubmit={(data) => onSubmit(data)} />
        </div>
        <div className="">
          {_.map(contacts, (contact: Contact, _index: number) => (
            <div
              className="relative flex p-6 mb-2 space-x-6 bg-white border rounded-lg shadow-lg"
              key={contact.id}
            >
              <div
                className="absolute top-0 right-0 p-3 font-bold text-gray-800 cursor-pointer"
                onClick={() => onDelete(contact.id)}
              >
                x
              </div>
              <Image
                src={contact.avatar}
                alt="Picture of the author"
                width={60}
                height={60}
                blurDataURL="data:..."
                placeholder="blur"
                className="rounded-full"
              />
              <div>
                <div className="font-serif text-xl text-gray-800">
                  {contact.firstName} {contact.lastName}
                </div>
                <div className="font-serif text-gray-500 text-md">
                  {contact.email}
                </div>
              </div>
            </div>
          ))}
        </div>
        <button onClick={notify}> dsadasdsa</button>
      </main>

      <ToastContainer />
    </div>
  );
};

export default Home;
